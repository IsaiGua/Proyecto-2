#include <Arduino.h>
#include <Wire.h>
#include <ESP32SPISlave.h>

/**** DEFINICIÓN DE PINES ****/
// Pin donde está conectado el potenciómetro
#define I2C_SLAVE_ADDR 8  // Dirección I2C del ESP32 (esclavo)
#define POT_PIN 34 
// Pines donde están conectados los LEDs
#define Led1 2
#define Led2 4
#define Led3 16

ESP32SPISlave slave;

// Pines para la comunicación SPI
const int VSPI_MISO = 19;
const int VSPI_MOSI = 23;
const int VSPI_SCLK = 18;
const int VSPI_SS = 5;

static constexpr uint32_t BUFFER_SIZE {32};
uint8_t spi_slave_tx_buf[BUFFER_SIZE];
uint8_t spi_slave_rx_buf[BUFFER_SIZE];
// Conoce lo que el núcleo le envío a la STM32
char cmd; 
char mil;
char decena;
char centena;
char unidad;
char milConvertido;
char centenaConvertido;
char decenaConvertido;
char unidadConvertido;

 //Definición de funciones 
void onI2CRequest();
/**** PROTOTIPOS DE FUNCIONES ****/
int tiempo(char numero);

/**** CONFIGURACIÓN INICIAL DE LOS PINES ****/
void setup() {
  // Inicia la comunicación SPI
  slave.setDataMode(SPI_MODE0);
  slave.setQueueSize(1);
  slave.begin(VSPI);

  // Definir los LEDs como salidas
  pinMode(Led1, OUTPUT);
  pinMode(Led2, OUTPUT);
  pinMode(Led3, OUTPUT);

  // Configuración I2C como esclavo
  Wire.begin(I2C_SLAVE_ADDR);        
  Wire.onRequest(onI2CRequest);

  // Clear buffers 
  memset(spi_slave_tx_buf,0,BUFFER_SIZE);
  memset(spi_slave_rx_buf,0,BUFFER_SIZE);

  // Comunicación serial para depuración
  Serial.begin(115200);
  Serial.println("ESP32 iniciado.");
}

void loop() {
  slave.wait(spi_slave_rx_buf, spi_slave_tx_buf, BUFFER_SIZE);
  while(slave.available()){
    Serial.print("Command.receive: ");
    Serial.println(spi_slave_rx_buf[0]);
    Serial.print("Mil: ");
    Serial.println(spi_slave_rx_buf[2]);
    Serial.print("Centena: ");
    Serial.println(spi_slave_rx_buf[3]);
    Serial.print("Decena: ");
    Serial.println(spi_slave_rx_buf[4]);
    Serial.print("Unidad: ");
    Serial.println(spi_slave_rx_buf[5]);
    cmd=spi_slave_rx_buf[0];
    mil=spi_slave_rx_buf[2];
    centena=spi_slave_rx_buf[3];
    decena=spi_slave_rx_buf[4];
    unidad=spi_slave_rx_buf[5];
    slave.pop();
  }

  milConvertido=tiempo(mil);
  centenaConvertido=tiempo(centena);
  decenaConvertido=tiempo(decena);
  unidadConvertido=tiempo(unidad);

  int tiempo= (milConvertido*1000) + (centenaConvertido*100) + (decenaConvertido*10)+ unidadConvertido;

  Serial.println(tiempo);

  if(cmd==49){
    digitalWrite(Led1,HIGH);
    delay(tiempo);
    cmd=' ';
    mil=' ';
    centena=' ';
    decena=' ';
    unidad=' ';
    digitalWrite(Led1,LOW);
  }

  if(cmd==50){
    digitalWrite(Led2,HIGH);
    delay(tiempo);
    cmd=' ';
    mil=' ';
    centena=' ';
    decena=' ';
    unidad=' ';
    digitalWrite(Led2,LOW);
  }

  if(cmd==51){
    digitalWrite(Led3,HIGH);
    delay(tiempo);
    cmd=' ';
    mil=' ';
    centena=' ';
    decena=' ';
    unidad=' ';
    digitalWrite(Led3,LOW);
  }
}

/*** DEFINICIÓN DE FUNCIONES ****/
int tiempo(char numero){
  int conversion = numero - '0';
  return conversion;
}

// Función que se ejecuta cuando el STM32 solicita datos I2C
void onI2CRequest() {
  // Leer el valor del potenciómetro
  int potValue = analogRead(POT_PIN);
  
  // Mapeo del valor del potenciómetro (0-4095 a 0-255)
  int mappedValue = map(potValue, 0, 4095, 0, 255);
  
  // Enviar el valor al STM32
  Wire.write(mappedValue);

  // Depuración serial
  Serial.println("Valor del potenciómetro enviado: " + String(mappedValue));
}
